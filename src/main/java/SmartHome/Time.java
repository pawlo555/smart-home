//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class Time implements java.lang.Cloneable,
                             java.io.Serializable
{
    public short seconds;

    public short minutes;

    public short hours;

    public Time()
    {
    }

    public Time(short seconds, short minutes, short hours)
    {
        this.seconds = seconds;
        this.minutes = minutes;
        this.hours = hours;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Time r = null;
        if(rhs instanceof Time)
        {
            r = (Time)rhs;
        }

        if(r != null)
        {
            if(this.seconds != r.seconds)
            {
                return false;
            }
            if(this.minutes != r.minutes)
            {
                return false;
            }
            if(this.hours != r.hours)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::Time");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, seconds);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, minutes);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, hours);
        return h_;
    }

    public Time clone()
    {
        Time c = null;
        try
        {
            c = (Time)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeShort(this.seconds);
        ostr.writeShort(this.minutes);
        ostr.writeShort(this.hours);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.seconds = istr.readShort();
        this.minutes = istr.readShort();
        this.hours = istr.readShort();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Time v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Time ice_read(com.zeroc.Ice.InputStream istr)
    {
        Time v = new Time();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Time> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Time v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(6);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<Time> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(Time.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Time _nullMarshalValue = new Time();

    /** @hidden */
    public static final long serialVersionUID = -617348222L;
}
