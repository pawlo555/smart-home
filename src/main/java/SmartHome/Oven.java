//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public interface Oven extends Device,
                              Timer
{
    short getMaxTemperature(com.zeroc.Ice.Current current);

    short getMinTemperature(com.zeroc.Ice.Current current);

    short getCurrentTemperature(com.zeroc.Ice.Current current);

    void setTemperature(short newTemperature, com.zeroc.Ice.Current current)
        throws InvalidTemperature;

    Modes[] getSupportedModes(com.zeroc.Ice.Current current);

    Modes getCurrentMode(com.zeroc.Ice.Current current);

    void setMode(Modes mode, com.zeroc.Ice.Current current)
        throws UnsupportedMode;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::SmartHome::Device",
        "::SmartHome::Oven",
        "::SmartHome::Timer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::SmartHome::Oven";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMaxTemperature(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        short ret = obj.getMaxTemperature(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShort(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMinTemperature(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        short ret = obj.getMinTemperature(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShort(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCurrentTemperature(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        short ret = obj.getCurrentTemperature(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeShort(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setTemperature(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        short iceP_newTemperature;
        iceP_newTemperature = istr.readShort();
        inS.endReadParams();
        obj.setTemperature(iceP_newTemperature, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getSupportedModes(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        Modes[] ret = obj.getSupportedModes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ModesSequenceHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCurrentMode(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        inS.readEmptyParams();
        Modes ret = obj.getCurrentMode(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Modes.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setMode(Oven obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(com.zeroc.Ice.OperationMode.Idempotent, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Modes iceP_mode;
        iceP_mode = Modes.ice_read(istr);
        inS.endReadParams();
        obj.setMode(iceP_mode, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "getCurrentMode",
        "getCurrentTemperature",
        "getMaxTemperature",
        "getMinTemperature",
        "getSupportedModes",
        "getTime",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isFinish",
        "isTurnedOn",
        "resetTimer",
        "setMode",
        "setTemperature",
        "setTime",
        "setTo",
        "start",
        "stop"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_getCurrentMode(this, in, current);
            }
            case 1:
            {
                return _iceD_getCurrentTemperature(this, in, current);
            }
            case 2:
            {
                return _iceD_getMaxTemperature(this, in, current);
            }
            case 3:
            {
                return _iceD_getMinTemperature(this, in, current);
            }
            case 4:
            {
                return _iceD_getSupportedModes(this, in, current);
            }
            case 5:
            {
                return Timer._iceD_getTime(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 10:
            {
                return Timer._iceD_isFinish(this, in, current);
            }
            case 11:
            {
                return Device._iceD_isTurnedOn(this, in, current);
            }
            case 12:
            {
                return Timer._iceD_resetTimer(this, in, current);
            }
            case 13:
            {
                return _iceD_setMode(this, in, current);
            }
            case 14:
            {
                return _iceD_setTemperature(this, in, current);
            }
            case 15:
            {
                return Timer._iceD_setTime(this, in, current);
            }
            case 16:
            {
                return Device._iceD_setTo(this, in, current);
            }
            case 17:
            {
                return Timer._iceD_start(this, in, current);
            }
            case 18:
            {
                return Timer._iceD_stop(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
